#summary Protocol that Omaha V3 uses to communicate with the update server
#labels Featured
= Omaha Client-Server Protocol V3 =

This document describes version 3 of the Omaha client-server protocol.  Omaha launched on Windows with this version of the protocol in May 2011.  (Version 2 of the protocol launched in May 2007 on Windows and May 2008 on Mac; Version 1 of the protocol was never deployed publicly.)

== Overview ==
The client sends requests via HTTP POST with an XML data body.  The response is an XML data body.

http://omaha.googlecode.com/svn/wiki/ServerProtocol_Images/omahaprotocol2.jpg

An HTTP request may concatenate multiple applications in one XML body; similarly, multiple request-actions may be included for any application.  The server responds with a status and other information (as appropriate) for each action, organized in a similar nested XML structure.


== Examples ==
=== Update Check ===
This example also shows bundling of requests for two different applications.

_Request:_

{{{
<?xml version="1.0" encoding="UTF-8"?>
<request protocol="3.0" version="1.3.23.0" ismachine="0" sessionid="{5FAD27D4-6BFA-4daa-A1B3-5A1F821FEE0F}" userid="{D0BBD725-742D-44ae-8D46-0231E881D58E}" installsource="scheduler" testsource="ossdev" requestid="{C8F6EDF3-B623-4ee6-B2DA-1D08A0B4C665}">
  <os platform="win" version="6.1" sp="" arch="x64"/>
  <app appid="{430FD4D0-B729-4F61-AA34-91526481799D}" version="1.3.23.0" nextversion="" lang="en" brand="GGLS" client="someclientid" installage="39">
    <updatecheck/>
    <ping r="1"/>
  </app>
  <app appid="{D0AB2EBC-931B-4013-9FEB-C9C4C2225C8C}" version="2.2.2.0" nextversion="" lang="en" brand="GGLS" client="" installage="6">
    <updatecheck/>
    <ping r="1"/>
  </app>
</request>
}}}

_Response (negative):_

There is not an update for either of the apps. The app and ping elements are acknowledged with status="ok".
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response protocol="3.0" server="prod">
  <daystart elapsed_seconds="56508"/>
  <app appid="{430FD4D0-B729-4F61-AA34-91526481799D}" status="ok>
    <updatecheck status="noupdate"/>
    <ping status="ok"/>
  </app>
  <app appid="{D0AB2EBC-931B-4013-9FEB-C9C4C2225C8C}" status="ok">
    <updatecheck status="noupdate"/>
    <ping status="ok"/>
  </app>
</response>
}}}

_Response (positive):_

There is an update available for only the second app. The app and ping elements are acknowledged with status="ok".
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response protocol="3.0" server="prod">
  <daystart elapsed_seconds="56508"/>
  <app appid="{430FD4D0-B729-4F61-AA34-91526481799D}" status="ok">
    <updatecheck status="ok">
      <urls>
        <url codebase="http://cache.pack.google.com/edgedl/chrome/install/782.112/"/>
      </urls>
      <manifest version="13.0.782.112">
        <packages>
          <package hash="VXriGUVI0TNqfLlU02vBel4Q3Zo=" name="chrome_installer.exe" required="true" size="23963192"/>
        </packages>
        <actions>
          <action arguments="--do-not-launch-chrome" event="install" run="chrome_installer.exe"/>
          <action Version="13.0.782.112" event="postinstall" onsuccess="exitsilentlyonlaunchcmd"/>
        </actions>
      </manifest>
    </updatecheck>
    <ping status="ok"/>
  </app>
  <app appid="{D0AB2EBC-931B-4013-9FEB-C9C4C2225C8C}" status="ok">
    <updatecheck status="noupdate"/>
    <ping status="ok"/>
  </app>
</response>
}}}

=== Event Report ===
Events are reports from the client to the server; no server response data are required, but they should be acknowledged with status="ok".

_Request:_
{{{
<?xml version="1.0" encoding="UTF-8"?>
<request protocol="3.0" version="1.3.23.0" ismachine="1" sessionid="{2882CF9B-D9C2-4edb-9AAF-8ED5FCF366F7}" userid="{F25EC606-5FC2-449b-91FF-FA21CADB46E4}" installsource="otherinstallcmd" testsource="ossdev" requestid="{164FC0EC-8EF7-42cb-A49D-474E20E8D352}">
  <os platform="win" version="6.1" sp="" arch="x64"/>
  <app appid="{8A69D345-D564-463C-AFF1-A69D9E530F96}" version="" nextversion="13.0.782.112" lang="en" brand="" client="" installage="6">
    <event eventtype="9" eventresult="1" errorcode="0" extracode1="0"/>
    <event eventtype="5" eventresult="1" errorcode="0" extracode1="0"/>
    <event eventtype="2" eventresult="4" errorcode="-2147219440" extracode1="268435463"/>
  </app>
</request>
}}}

_Response:_
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response protocol="3.0" server="prod">
  <daystart elapsed_seconds="56754"/>
  <app appid="{8A69D345-D564-463C-AFF1-A69D9E530F96}" status="ok">
    <event status="ok"/>
    <event status="ok"/>
    <event status="ok"/>
  </app>
</response>
}}}

=== Data Request ===
Install data are requested at install time; the updatecheck in this example has been removed for clarity.

_Request:_
{{{
<?xml version="1.0" encoding="UTF-8"?>
<request protocol="3.0" version="1.3.23.0" ismachine="0" sessionid="{5FAD27D4-6BFA-4daa-A1B3-5A1F821FEE0F}" userid="{D0BBD725-742D-44ae-8D46-0231E881D58E}" installsource="scheduler" testsource="ossdev" requestid="{C8F6EDF3-B623-4ee6-B2DA-1D08A0B4C665}">
  <os platform="win" version="6.1" sp="" arch="x64"/>
  <app appid="{430FD4D0-B729-4F61-AA34-91526481799D}" version="1.3.23.0" nextversion="" lang="en" brand="GGLS" client="someclientid" installage="39">
    <updatecheck/>
    <data name="install" index="verboselogging"/>
    <ping r="1"/>
  </app>
</request>
}}}

_Response:_
{{{
<?xml version="1.0" encoding="UTF-8"?>
<response protocol="3.0" server="prod">
  <daystart elapsed_seconds="56754"/>
  <app appid="{8A69D345-D564-463C-AFF1-A69D9E530F96}" status="ok">
    <data index="verboselogging" name="install" status="ok">
      app-specific values here
    </data>
  </app>
</response>
}}}

== Reference ==
A terse description of the XML elements and attributes follows.
=== request Element ===
This is the envelope around the entire request.  The request attributes describe global data describing the machine or the Omaha client instance.  The response attributes are minimal.

_Request Attributes_
   * protocol: Always "3.0".
   * version: The version number of the Omaha client.
   * ismachine: 0 or 1, depending on whether the Omaha client is a per-user or per-machine instance.
   * requestid: A random GUID generated for each request.  (This is used to de-duplicate requests that are sent multiple times by buggy network stacks and/or proxy servers.)
   * sessionid: A random GUID associated with the current task - a clean install, a update check, etc.  If a task requires sending multiple requests from different processes (for example, an Omaha self-update that sends event pings both before and afterwards), those requests will have identical session IDs.
   * userid (optional): A random GUID associated with the logged-in user.  There will be a different userid for each username on the machine, as well as for the per-machine instance.  UIDs are opt-in and will not be generated if not opted into.
   * installsource (optional): An arbitrary string that can mark the source of a request; set by the client driving Omaha.  Typical examples: "scheduledtask", "ondemandupdate", "selfupdate", "update3web", "oneclick", and so on.
   * originurl (optional): If Omaha is invoked via a web browser plugin, contains the URL of the page invoking it.
   * testsource (optional): Identifies requests related to development and testing.  May be omitted, or one of "dev", "qa", "prober", "auto", "ossdev".

_Response Attributes_
   * protocol: Always "3.0".
   * server: A string identifying the server that provided the response, mostly for diagnostic purposes.  Typical examples: "prod", "unittest", etc.

=== os Element ===
Inside the request envelope, but prior to any app-request elements, is an os element that describes the O/S of the machine.  The server never supplies an os element in the response.

_Request Attributes_
   * platform: One of "win", "mac".
   * version: On Windows, the major-minor O/S version, e.g. "5.1", on the Mac, it is "MacOSX".
   * sp: On Windows, the service-pack version, e.g. "Service Pack 2", on the Mac, OS version and processor architecture, like "10.5.6_i486" or "10.4.11_ppc750".
   * arch: One of "x86", "x64".

_Response Attributes_

N/A

=== daystart Element ===
Inside the request envelope, but prior to any app-response elements, is a daystart element that gives the number of seconds since midnight at the server's locale.  This is used by the client to calculate days-since attributes in pings.

_Request Attributes_

N/A

_Response Attributes_
  * elapsed_seconds: Number of seconds since midnight at the server's locale.

=== app Element ===
The app element may be repeated in the request any number of times.  The server will reply with a corresponding app element for each request app element; In practice, the app elements of the response will be in the same order as the request.

_Request Attributes_
   * appid: The id of the app.  On Windows this is a GUID, including the braces ({}); on Mac it is a bundle ID of the form com.google.appname.  You can use GUIDs on the Mac, but it's usually easier to just get the application's bundle ID.
   * version: The dotted-quad version of the app.  A "" value is interpreted as "0.0.0.0", namely a new install.
   * nextversion: The dotted-quad version of the app upgrade in progress.  This is mainly used for sending events during or after an upgrade; it will be "" for initial update checks.
   * lang: Language of the app install. Should be in BCP 47 representation.
   * brand: Brand code specified at install time, if any. These are typically used to tabulate partner deals and website promotions.
   * client: Similar to brand code.
   * ap (optional): Additional parameters specified at install time, if any. These are usually used to denote experimental branches/tracks.
   * experiments (optional): An experiment key/value list, if any.  This can be specified at install time, or set by the server in previous update responses. These are usually used to denote experimental branches/tracks.
   * iid (optional): A random GUID used to uniquely count install attempts. For example, if a user fails to install then re-runs the installer and succeeds, we might want to count that as one "attempt".
   * installage (optional): The number of days since the app was first installed.  A new install should use -1 days.

_Response Attributes_
   * appid: The id of the app. See Request Attributes.
   * status: One of:
      * "ok": The appid was recognized and action elements are included in the response.
      * "error-unknownApplication": The appid was not recognized and no action elements are included.
      * "error-invalidAppId": The appid is not properly formed; no action elements are included.
      * "error-restricted": The application is not available to this user (usually based on country export restrictions).
      * ...any other string prefixed by "error-": Added to the protocol as needed.
   * experiments (optional): An experiment key/value list, if any.  If the server responds with any entries in this attribute, the client should save those experiments in the Registry or other store, and include them in later requests.

=== App Action Elements ===
Actions are always the child of an app element and pertain to that app.

==== updatecheck ====
Request whether a newer version of the application is available.

_Request Attributes_
   * tttoken (optional): An access token for protected downloads.  The request should be sent over SSL if this attribute is present.
   * updatedisabled (optional): `"true"` indicates that an update response will not be applied because it is disallowed by Group Policy.

_Response Attributes_

The "status" attribute is always present; the rest are supplied only if an update is available.

The update check is over a secure channel.  By providing the size and hash of the download binary, the binary itself may be fetched over an insecure channel and still be verified.

   * status: One of:
      * "noupdate": No update is available.
      * "ok": An update specification is included.
      * "error-hash": Internal error in obtaining the hash of the installer binary.
      * "error-osnotsupported": The operating system version is not supported.
      * "error-internal": Other internal error.
   * tttoken (optional): An access token for protected downloads.  The request should be sent over SSL if this attribute is present.
   * errorurl (optional): A URL that provides more information for the error in status. The Omaha client supports this for "error-osnotsupported".

On a status value of "ok", additional children will be included.
==== event ====
The event response is always status="ok", meaning the data were successfully received.

_Request Attributes_
   * eventtype: One of
      * 0: unknown
      * 1: download complete
      * 2: install complete
      * 3: update complete
      * 4: uninstall
      * 5: download started
      * 6: install started
      * 9: new application install started
      * 10: setup started
      * 11: setup finished
      * 12: update application started
      * 13: update download started
      * 14: update download finished
      * 15: update installer started
      * 16: setup update begin
      * 17: setup update complete
      * 20: register product complete
      * 30: OEM install first check
      * 40: app-specific command started
      * 41: app-specific command ended
      * 100: setup failure
      * 102: COM server failure
      * 103: setup update failure
   * eventresult: One of
      * 0: error
      * 1: success
      * 2: success reboot
      * 3: success restart browser
      * 4: cancelled
      * 5: error installer MSI
      * 6: error installer other
      * 7: noupdate
      * 8: error installer system
      * 9: update deferred
      * 10: handoff error
   * errorcode: (optional)
      * For eventresult==0: Omaha error code
      * For eventresult=={1 | 2 | 3| 5 | 6 | 8}: Application-specific installer exit/result code.
   * extracode1: (optional) Additional numerical information related to errorcode.

_Response Attributes_
   * status: Always "ok"

==== ping ====
The ping response is always status="ok", meaning the data were successfully received.

_Request Attributes_
In either case, the special value "-1" indicates a new install.  An attr may be omitted if the value is "0"; and the entire ping may be omitted if both values are zero.
   * a: The app was active since the last report; the value is the number of days since the app last reported active.  The attr is omitted if the app was not active.
   * r: The app is present; the value is the number of the days since the app last reported present.

_Response Attributes_
   * status: Always "ok"

==== data ====
The metainstaller or install command line includes an insecure data "index", which corresponds to a specific blob of install data on the server.  The client securely requests the data for this index from the server using the "data" element.

_Request Attributes_
   * name: A collection specifier (must be alphanumeric; at the moment, is hard-wired on Windows to "install".)
   * index: The requested element of the collection (must be alphanumeric)

_Response Attributes_
   * status: One of:
      * "ok": Data blob included
      * "error-invalidargs": the name or index was not alphanumeric
      * "error-nodata": the named collection or index was not found
   * name: The collection specifier.  (Windows expects this to be "install".)
   * index: The requested element of the collection.

The data itself is returned as a text element child of the data element.
==== unknown ====
If the client sends an unrecognized child element of the app element, the server will respond with an "unknown" element in the corresponding position of the response.  The status will always be "error".  (This is meant to maintain the structure of the response, which mirrors the app and action elements of the request.)

=== UpdateCheck Response Elements ===
When an updatecheck response element has a status of "ok", the following child elements are included, describing the method for performing the update check.

==== urls ====
Contains no attributes.  Contains one or more url child elements describing URLs prefixes where a package can be downloaded.

===== url =====
Contains the URL prefix where packages can be found.

==== manifest ====
_Request Attributes_
    N/A

_Response Attributes_
   * version (optional): Contains the version that this manifest should deliver when finished.

The manifest contains two child elements - packages and actions.

==== packages ====
Contains no attributes.  Contains one or more package child elements.

===== package =====
_Request Attributes_
    N/A

_Response Attributes_
   * name: Contains a filename to download.  Omaha will sequentially attempt to build a URL by appending this name to each url in the urls element and download it.
   * is_required: Contains `"true"` or `"false"`.  Denotes whether or not the file is required for the install to succeed.
   * size: Contains the size in bytes of the installer binary.
   * hash: Contains the SHA-1 hash of the installer binary, encoded in base64.

==== actions ====
Contains no attributes.  Contains one or more action child elements.

===== action =====
_Request Attributes_
    N/A

_Response Attributes_
   * event: Contains a fixed string denoting when this action should be run.  One of:
      * `"preinstall"`
      * `"install"`
      * `"postinstall"`
      * `"update"`
   * run (optional): The name of an installer binary to run.  (Typically, this binary was specified to be downloaded in the prior packages element.)
   * arguments (optional): Arguments to be passed to that installer binary.
   * successurl (optional): A URL to be opened using the system's default web browser on a successful install.
   * terminateallbrowsers (optional): If `"true"`, close all browser windows before starting the installer binary.
   * successsaction (optional): Contains a fixed string denoting some action to take in response to a successful install.  One of:
     * `"default"`
     * `"exitsilently"`
     * `"exitsilentlyonlaunchcmd`"

== Security Headers ==
The response must be secure: the client must be sure the response data blob came from Google and that it was not tampered with.  This is done by either
   * using SSL
   * using the secure Client-Update Protocol (CUP)

If the client elects to use SSL, no further integrity checking is needed.  If CUP is used, the following HTTP headers and parameters will be added, which allow a signature to be supplied by the server and verified by the client.  The [http://omaha.googlecode.com/svn/wiki/cup.html CUP design document] describes the protocol in detail.

=== CUP Request ===
   * w (URL parameter): Encodes a proposed private key.  Provides nonce for protection against replay in the signed response.
   * If-Match (HTTP header): Signature that proves the client knows its own private key.
   * Cookie (HTTP header): (optional)  Encrypted copy of the client's private verification key. (Not related to any browser cookie.)

=== CUP Response ===
   * ETag (HTTP header): Response signature
   * Set-Cookie (HTTP header): (optional)  Encrypted copy of the client's private key, for the client to send in the next request. (Not related to any browser cookie.)